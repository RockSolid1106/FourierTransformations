from manim import *
import cmath
p=75
SCALE=25
class fourier(MovingCameraScene):
    

    
    def construct(self):
        
        self.play(
            self.camera.frame.animate.scale(SCALE)
        )
        self.camera.frame_rate
        tracker = ValueTracker(0)
        self.add(tracker)
        '''
        c_pos = [(0.001), (-3.5557758604616065+0.8450882245086149j), (6.170894909041951-2.0461173191410444j), (-5.215457568201951-3.80217219382152j), (-2.137758024308451-0.9401053070614245j), (2.243721200760884-1.6778065275828642j), (-1.9420943162653304+1.7408585242999217j), (-1.287743753852503+1.2997490884984897j), (-0.20643331967067802+0.2047572205829037j), (-0.6634687543012522+0.522610524635955j)]
        c_neg = [(0.001), (-13.087365961243135-13.542113306897331j), (-10.68331802752506-0.42329969714810817j), (2.8663339981530918-0.7728818484710079j), (0.6046761657013724+5.586056200127495j), (1.199396733446872-0.5060347156804782j), (-0.635467894149844+0.2721492475754469j), (0.514996879014115-0.49246904435285016j), (-1.2528250391237368+0.03196451442585109j), (0.15999869626277682+1.2422822492938983j)]
        '''
        c_pos = [(0.0001), (12.432506732548717-6.863149759686014j), (-0.49648960034061435+3.0594597303579274j), (-18.49220883277878-9.824946574053193j), (0.07670776973288115+4.415040764791639j), (-11.207094341676795-7.0003478544484015j), (3.6625015320148417-5.797705808065618j), (-2.0014626781048372+7.355114999480136j), (-1.9174552516680803-0.04898984195449693j), (-1.017826292286294-0.9560611525675753j), (0.31369894867982845-0.6425902215629771j), (-1.1411615768057684+3.2397687334707745j), (1.6206370110840307-2.088243595870857j), (-0.8873095346962678-0.33549754549324257j), (0.6806434823188658+0.9556474823930241j), (0.13031679640401564-0.7536072261466565j), (-0.05444367188357087-0.4472119961412736j), (-0.8725836198160496-0.03137959382741287j), (0.2650286559606132-0.395188972730617j), (-0.36022977707315407-0.44184195581604246j), (-0.14660122706675754+0.7218507137564004j), (0.06737357424179022-0.19006703600302663j), (-0.004420532541247471-0.11706830353176338j), (-0.3445182113403467+0.11049173775364304j), (0.4593003005492838+0.1610017997038366j), (-0.12034811517964562-0.8727828640448618j), (-0.48674916005144736+0.47401016821047937j), (0.8761292122183341-0.15174474341885685j), (-0.640174634739302-0.14543508190249915j), (0.1849180045507472+0.15536711767737904j), (-0.2968680738451691-0.6890554796976798j), (0.07199558982362526+0.20432945989180054j), (0.04352203177603371-0.12549208796965175j), (-0.38353813457466646-0.09053209036308288j), (-0.09978779243581247+0.16576317574019003j), (0.060317382760643204+0.010521161973138085j), (-0.055788486288101444+0.06174272980409826j), (-0.035818876436667424-0.18831681262583158j), (0.14845796532131755-0.01186953986891457j), (-0.12181534918849399-0.024353264723094212j), (-0.02638290170078792-0.005538865912042567j), (-0.11253332727418734-0.004134211742852424j), (-0.07685372696214607-0.1274729026653831j), (-0.035424104901534616+0.042478775651213885j), (0.07601972724923863+0.04431306175833978j), (-0.015253329464239471-0.03773508862007323j), (-0.09826405115432374-0.0423894283591971j), (-0.04351452107956701+0.01795063875598376j), (0.0055332128764781375-0.02603717694170779j), (-0.054466654583723274-0.03522718206299643j), (0.0021143371991615752-0.005037115264712039j), (-0.03943139583151158+0.04465473372530137j), (-0.015676442429316498+0.00457241431399022j), (0.01342799754633859+0.0004364870330212309j), (-0.030234741301185745-0.06468278258922286j), (-0.004368244660230073+0.07121572435665906j), (0.01137578160875158-0.12761948887388827j), (-0.03715219681572707+0.07702690645593534j), (0.0052330347448450824-0.08276684781512936j), (-0.07009726862838728+0.02538764231699584j), (-0.02214819195841523+0.027106580300668166j), (0.009350118382900228-0.01942445934563297j), (-0.01403513186117827-0.011497495215880126j), (0.008483104961573494+0.0313621914114551j), (-0.0377621370586125-0.036468848359806016j), (0.05477302469422676+0.03323410337482213j), (-0.023594442953965657-0.08194092699511295j), (-0.0876153128240285+0.09851329425800937j), (0.08778900423994661-0.044640776297905915j), (-0.024328630677024957-0.07879939442587888j), (0.01676285400944398+0.07526429136525811j), (0.010401877485425204-0.0763204094076256j), (-0.06744696556884437-0.006882000193077147j), (0.0034217993712651706-0.02730420994569189j), (-0.054510636004482464-0.00908315904495757j)]
        c_neg = [(0.0001), (-25.650636975651697-30.74614942481837j), (-31.503135416376843-20.56410022595349j), (-15.22368944800344-8.724112377915501j), (1.1440766791865686+3.2232037044569166j), (3.3985524473729534+4.824949813675536j), (-3.3887612617184497+4.9100548496000345j), (-5.689612831458724-2.5833108139954244j), (-0.07118433725181382-5.518018136406465j), (-2.2302195078152423+0.1325484048848184j), (-1.041792118432416+1.445733051136385j), (0.008681408684975415+0.018667722582074327j), (0.20010223170618388-1.6028694544581836j), (-0.5448630282547964-1.0366715909193696j), (-0.32982330244158825-0.040498296201226j), (0.13526138828355383+0.05819806526858118j), (-0.6709353541262969-0.6295999628445003j), (0.2824993867516836+0.6041797191996451j), (0.0013994327325972653+0.2510384269354398j), (0.02047207807882892-0.49070028526971554j), (-0.8854925128006942-0.3586709361565409j), (-0.408479495521315-0.18700575197168798j), (0.343913549946102-0.10121726858340276j), (-0.046574757076813036-0.10946153428069846j), (0.07293596157660905-0.24296168090794146j), (0.060007592271115365+0.12278832850129369j), (0.08137608749240144-0.2173108890983862j), (-0.3689918590866126-0.026839472528501884j), (-0.2397774008063883+0.14086767944665488j), (0.32055764537786463-0.3369110599748776j), (0.0027685131847558697+0.03967540170712824j), (-0.10795687631703041-0.24872383574736293j), (0.4092207366180074+0.16571869276652845j), (-0.23284929060477552+0.07773712359311287j), (0.011850882261366586-0.14740854609274254j), (-0.12166882727188712+0.4837893383921591j), (-0.11691163292192268-0.24510804502759362j), (0.02672339287468877-0.09752699119156368j), (-0.06939931017752239-0.1119990435598964j), (-0.05863775219464766+0.08285108024896859j), (0.11217494582906753-0.14806655123133516j), (0.011434810488079506+0.10338092007891399j), (-0.08895473532947548+0.06260989613951955j), (0.0840670720112167+0.015558555965483889j), (-0.18754928272505716+0.07660954957799394j), (-0.020169025222192556-0.2619675701790898j), (0.08569555503391034+0.1723235661386068j), (-0.22299542294384586-0.08413050200902814j), (0.19754818782789701-0.04606110491155424j), (-0.11629509224173173+0.16326254605569165j), (0.06524253933288147-0.06438177239074594j), (-0.11254937311312017-0.044100185036001965j), (-0.06310706422892369+0.027716003225526163j), (-0.08057056492121557-0.007263656502750251j), (0.06396575868042569-0.09894213414512901j), (-0.009149105741726822+0.02254203990963975j), (-0.0025825931436404843+0.020854884349450105j), (0.055032871048802626-0.03469724004418434j), (-0.05137229375240598+0.005707680343851468j), (-0.10227557982118657+0.058533127421083506j), (-0.028950190167753357+0.03592969762353336j), (0.006592094407491026-0.0562444181734091j), (-0.05015687651269855-0.07379595654351699j), (-0.030945466285989303-0.002716674954863406j), (0.041780833795969176-0.0603987359881715j), (-0.012257854773287566+0.005778062630681615j), (-0.035513564873791606+0.03120085631445071j), (0.03613735908754796+0.03519365080613021j), (-0.044657555424834114-0.027878969408252473j), (-0.025279796863537655-0.05631076671026338j), (-0.07855466353702652-0.04323480339661254j), (0.06126211795251427+0.007944944435409503j), (0.0059007785735415205-0.05710313034444362j), (0.04764471128295299+0.013033519444975439j), (0.018632218726544556+0.03201523222554932j)]
        arrows_pos = list()
        arrows_neg = list()
        
        def e2m(a):
            list = [a.real, a.imag, 0]
            return list
        
        def create_vecs(n):
            
            arrows_pos.append(Arrow(start=ORIGIN, end=e2m(c_pos[0]*cmath.exp(0*2*PI*1j*tracker.get_value())), buff=0))
            arrows_neg.append(Arrow(start=ORIGIN, end=e2m(c_neg[0]*cmath.exp(0*2*PI*1j*tracker.get_value())), buff=0))
            self.add(arrows_pos[0])

            for i in range(1, n):
                arrows_pos.append(Arrow(start=arrows_neg[i-1].get_end(), end=arrows_neg[i-1].get_end() + e2m(c_pos[i]*cmath.exp(float(i)*2*PI*1j*tracker.get_value())), buff=0))
                self.add(arrows_pos[i])
                
                arrows_neg.append(Arrow(start=arrows_pos[i].get_end(), end=arrows_pos[i].get_end() + e2m(c_neg[i]*cmath.exp(-float(i)*2*PI*1j*tracker.get_value())), buff=0))
                self.add(arrows_neg[i])
 
        def add_upd(n):
            arrows_pos[0].add_updater(
                lambda x: x.put_start_and_end_on(start=ORIGIN, end=e2m(c_pos[0]*cmath.exp(0*2*PI*1j*tracker.get_value())))
            )
            for i in range(1, n):
                arrows_pos[i].add_updater(
                    lambda x, i=i: x.put_start_and_end_on(start=arrows_neg[i-1].get_end(), end=arrows_neg[i-1].get_end() + e2m(c_pos[i]*cmath.exp(float(i)*2*PI*1j*tracker.get_value()))) # i=i because for each loop run, i gets overwritten
                )
            for i in range(1, n):
                arrows_neg[i].add_updater(
                    lambda x, i=i: x.put_start_and_end_on(start=arrows_pos[i].get_end(), end=arrows_pos[i].get_end() + e2m(c_neg[i]*cmath.exp(-float(i)*2*PI*1j*tracker.get_value()))) # i=i because for each loop run, i gets overwritten
                )
            
            

        create_vecs(p)
        add_upd(p)
        
        tracer = Dot(np.array(arrows_neg[p-1].get_end()), color=GREEN)
        trace = TracedPath(tracer.get_center, stroke_color=RED, stroke_width=25)
        self.add(tracer, trace) #tracer
        tracer.add_updater(
            lambda x: x.move_to(np.array(arrows_neg[p-1].get_end()))
        )
        

        tracker.add_updater(lambda x, dt: x.increment_value(dt*0.05))
        self.wait(25)